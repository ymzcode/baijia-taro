import smoothPoints from"./algorithm/smoothPoints";export default class Painter{constructor(t,e,o){this.context=t,this.width=e,this.height=o}getCanvasSize(){const{width:t,height:e}=this;return{width:t,height:e}}begin(){this.context.beginPath()}close(){this.context.closePath()}drawRect(t,e,o,i){this.context.rect(t,e,o,i)}drawOval(t,e,o,i){let{context:s}=this;if(o===i){const i=o/2;s.moveTo(t+i,e),s.arc(t,e,i,0,2*Math.PI,!0)}else{let{context:s}=this;if(o===i){const i=o/2;s.moveTo(t+i,e),s.arc(t,e,i,0,2*Math.PI,!0)}else{const n=o/.75/2,h=i/2,r=[{x:t,y:e-h},{x:t+n,y:e-h},{x:t+n,y:e+h},{x:t,y:e+h},{x:t-n,y:e+h},{x:t-n,y:e-h}];s.moveTo(r[0].x,r[0].y),s.bezierCurveTo(r[1].x,r[1].y,r[2].x,r[2].y,r[3].x,r[3].y),s.bezierCurveTo(r[4].x,r[4].y,r[5].x,r[5].y,r[0].x,r[0].y)}const n=o/.75/2,h=i/2;s.moveTo(t,e-h),s.bezierCurveTo(t+n,e-h,t+n,e+h,t,e+h),s.bezierCurveTo(t-n,e+h,t-n,e-h,t,e-h)}}drawPoints(t,e){if(t.length>1){let o=t;e&&(o=smoothPoints(t));const i=o[0];this.moveTo(i.x,i.y),o.forEach(t=>{this.lineTo(t.x,t.y)})}}stroke(){this.context.stroke()}draw(t){this.context.draw(t)}fill(){this.context.fill()}strokeRect(t,e,o,i){this.context.strokeRect(t,e,o,i)}fillRect(t,e,o,i){this.context.fillRect(t,e,o,i)}strokeText(t,e,o){this.context.strokeText(o,t,e)}fillText(t,e,o){this.context.fillText(o,t,e)}measureText(t){return this.context.measureText(t)}isPointInPath(t,e){return this.context.isPointInPath(t,e)}clear(){let{context:t}=this;t.draw()}moveTo(t,e){this.context.moveTo(t,e)}lineTo(t,e){this.context.lineTo(t,e)}arc(t,e,o,i,s,n){this.context.arc(t,e,o,i,s,n)}bezierCurveTo(t,e,o,i,s,n){this.context.bezierCurveTo(t,e,o,i,s,n)}createLinearGradient(t,e,o,i){return this.context.createLinearGradient(t,e,o,i)}enableShadow(t,e,o,i){return this.context.setShadow(t,e,o,i)}disableShadow(){}save(){this.context.save()}restore(t){this.context.restore()}setFont(t,e,o,i){let s=[];o&&s.push("italic"),i&&s.push("bold"),s.push(`${t}px`,e),this.context.setFontSize(t)}setLineWidth(t){this.context.setLineWidth(t)}setLineJoin(t){this.context.setLineJoin(t)}setLineCap(t){this.context.setLineCap(t)}setStrokeStyle(t){this.context.setStrokeStyle(t)}setFillStyle(t){this.context.setFillStyle(t)}};