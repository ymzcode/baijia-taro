import Shape from"./Shape";import constant from"../constant";import array from"../util/array";import containPolygon from"../contain/polygon";import getOffsetPoints from"../function/getOffsetPoints";import getDistance from"../function/getDistance";import getPointOfCircle from"../function/getPointOfCircle";const PI2=2*Math.PI;export default class Polygon extends Shape{isPointInFill(t,o,i){return containPolygon(this.points,o,i)}drawPath(t){t.drawPoints(this.points),t.close()}stroke(t){let{points:o,strokePosition:i,lineWidth:n,strokeStyle:e}=this;n/=constant.DEVICE_PIXEL_RATIO,t.setLineWidth(n),t.setStrokeStyle(e),t.begin(),i===constant.STROKE_POSITION_INSIDE?o=getOffsetPoints(o,n/-2):i===constant.STROKE_POSITION_OUTSIDE&&(o=getOffsetPoints(o,n/2)),t.drawPoints(o),t.close(),t.stroke()}fill(t){t.setFillStyle(this.fillStyle),t.begin(),this.drawPath(t),t.fill()}drawing(t,o,i,n,e,s){s();const{count:r}=this,a=getDistance(o,i,n,e),l=PI2/r,c=[];let f=Math.atan2(e-i,n-o),h=f+PI2;do{array.push(c,getPointOfCircle(o,i,a,f)),f+=l}while(f<=h);c.length-r==1&&array.pop(c),this.points=c,this.draw(t)}validate(){const t=this.getRect();return t.width>5&&t.height>5}toJSON(){return super.toJSON({name:"Polygon"})}};